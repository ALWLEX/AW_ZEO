# AW_ZEO/services/ai_service.py

import openai
import logging
import re
from typing import Dict, Any, Optional

from config import OPENAI_API_KEY

logger = logging.getLogger(__name__)


class AIService:
    def __init__(self):
        self.client = None
        if OPENAI_API_KEY:
            try:
                self.client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
                logger.info("OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")

        self.keywords = {
            '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ø–∞—Ä—ã', '–∫–æ–≥–¥–∞ —É—á–∏—Ç—å—Å—è', '—Ä–∞—Å–ø–∏—Å', '–∑–∞–Ω—è—Ç–∏—è'],
            'moodle': ['–ª–æ–≥–∏–Ω', '–ø–∞—Ä–æ–ª—å', 'moodle', '–∞–∫–∫–∞—É–Ω—Ç', '—É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'],
            '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ': ['–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–µ–Ω—Ç', '–±–∞–ª–ª—ã', '–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç', '–ø–æ—Å—Ç—É–ø–∏—Ç—å'],
            '—Ç–µ—Å—Ç': ['—Ç–µ—Å—Ç', '–∫–ª–∏–º–æ–≤–∞', '–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è'],
            '–ø—Ä–æ–≥—Ä–∞–º–º—ã': ['–ø—Ä–æ–≥—Ä–∞–º–º—ã', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']
        }

    async def process_natural_language(self, text: str, user_id: int) -> str:
        try:
            if self.client:
                return await self.process_with_gpt(text, user_id)
            else:
                return self.fallback_response(text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞: {e}")
            return self.fallback_response(text)

    async def process_with_gpt(self, text: str, user_id: int) -> str:
        try:
            system_prompt = """
            –¢—ã - AW_ZEO, —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –ö–†–£ –∏–º. –ê. –ë–∞–π—Ç—É—Ä—Å—ã–Ω–æ–≤–∞.
            –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–≤—ã".

            –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
            1. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –∏ –∫–∞–∫–∏–µ –ø–∞—Ä—ã
            2. –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Moodle - –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏
            3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ - –ø—Ä–æ–≥—Ä–∞–º–º—ã, –±–∞–ª–ª—ã –ï–ù–¢
            4. –¢–µ—Å—Ç –ö–ª–∏–º–æ–≤–∞ - –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
            5. –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã - –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞, –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞

            –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, –≤–µ–∂–ª–∏–≤–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.
            """

            response = await self.client.chat.completions.create(
                model="gpt-5-turbo",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": text}
                ],
                max_tokens=500
            )

            return response.choices[0].message.content

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return self.fallback_response(text)

    def fallback_response(self, text: str) -> str:
        text_lower = text.lower()

        if any(word in text_lower for word in self.keywords['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ']):
            return "üìÖ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'. –¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä—ã –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å!"

        elif any(word in text_lower for word in self.keywords['moodle']):
            return "üéì –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Moodle –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ 'Moodle' –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –¢–∞–º –∂–µ –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É!"

        elif any(word in text_lower for word in self.keywords['–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ']):
            return "üéØ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ'. –¢–∞–º –∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç!"

        elif any(word in text_lower for word in self.keywords['—Ç–µ—Å—Ç']):
            return "üß© –¢–µ—Å—Ç –ö–ª–∏–º–æ–≤–∞ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏! –ü—Ä–æ–π–¥–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ' -> '–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è'."

        elif any(word in text_lower for word in self.keywords['–ø—Ä–æ–≥—Ä–∞–º–º—ã']):
            return "üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö (–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞, –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞) –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ'."

        else:
            return "ü§ñ –Ø –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AW_ZEO - —Ç–∞–º –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n\n‚Ä¢ üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ üéì Moodle\n‚Ä¢ üéØ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ!"

    def process_message(self, message: str, user_id: str) -> str:
        return self.fallback_response(message)

    def extract_group_from_text(self, text: str) -> Optional[str]:
        try:
            patterns = [
                r'[–ê-–Ø–∞-—è]{2,4}-\d{2}-\d{3}-\d{2}',
                r'[–ê-–Ø–∞-—è]{2,4}\d{2}-\d{3}-\d{2}',
                r'\d{2}-\d{3}-\d{2}',
            ]

            for pattern in patterns:
                matches = re.findall(pattern, text)
                if matches:
                    return matches[0]

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            return None

    def extract_date_from_text(self, text: str) -> Optional[str]:
        try:
            patterns = [
                r'\d{2}\.\d{2}\.\d{4}',
                r'\d{4}-\d{2}-\d{2}',
                r'\d{1,2}\s+\w+\s+\d{4}',
            ]

            for pattern in patterns:
                matches = re.findall(pattern, text)
                if matches:
                    return matches[0]

            days = {
                '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'monday',
                '–≤—Ç–æ—Ä–Ω–∏–∫': 'tuesday',
                '—Å—Ä–µ–¥–∞': 'wednesday',
                '—á–µ—Ç–≤–µ—Ä–≥': 'thursday',
                '–ø—è—Ç–Ω–∏—Ü–∞': 'friday',
                '—Å—É–±–±–æ—Ç–∞': 'saturday',
                '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sunday',
                '—Å–µ–≥–æ–¥–Ω—è': 'today',
                '–∑–∞–≤—Ç—Ä–∞': 'tomorrow',
                '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': 'day_after_tomorrow'
            }

            text_lower = text.lower()
            for day_ru, day_en in days.items():
                if day_ru in text_lower:
                    return day_en

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
            return None