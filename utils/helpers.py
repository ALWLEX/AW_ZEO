# AW_ZEO/utils/helpers.py
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ AW_ZEO
–£—Ç–∏–ª–∏—Ç—ã –∏ –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import re
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)


def validate_phone_number(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_phone = re.sub(r'[^\d+]', '', phone)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        patterns = [
            r'^\+7\d{10}$',  # +77001234567
            r'^87\d{9}$',  # 87001234567
            r'^7\d{10}$',  # 77001234567
            r'^8\d{10}$',  # 87001234567 (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
        ]

        return any(re.match(pattern, cleaned_phone) for pattern in patterns)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        return False


def format_phone_number(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    try:
        cleaned = re.sub(r'[^\d+]', '', phone)

        if cleaned.startswith('87') and len(cleaned) == 11:
            return '+7' + cleaned[2:]
        elif cleaned.startswith('7') and len(cleaned) == 11:
            return '+' + cleaned
        elif cleaned.startswith('8') and len(cleaned) == 11:
            return '+7' + cleaned[1:]
        elif cleaned.startswith('+7') and len(cleaned) == 12:
            return cleaned
        else:
            return phone  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        return phone


def parse_date_input(date_str: str) -> Optional[datetime]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        date_str = date_str.lower().strip()

        # –°–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
        if date_str == '—Å–µ–≥–æ–¥–Ω—è':
            return datetime.now()
        elif date_str == '–∑–∞–≤—Ç—Ä–∞':
            return datetime.now() + timedelta(days=1)
        elif date_str == '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞':
            return datetime.now() + timedelta(days=2)

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        days_mapping = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
            '–≤—Ç–æ—Ä–Ω–∏–∫': 1,
            '—Å—Ä–µ–¥–∞': 2,
            '—á–µ—Ç–≤–µ—Ä–≥': 3,
            '–ø—è—Ç–Ω–∏—Ü–∞': 4,
            '—Å—É–±–±–æ—Ç–∞': 5,
            '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
        }

        if date_str in days_mapping:
            today = datetime.now()
            target_day = days_mapping[date_str]
            current_day = today.weekday()

            days_ahead = target_day - current_day
            if days_ahead <= 0:
                days_ahead += 7

            return today + timedelta(days=days_ahead)

        # –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        date_formats = [
            '%d.%m.%Y',  # 25.12.2024
            '%Y-%m-%d',  # 2024-12-25
            '%d/%m/%Y',  # 25/12/2024
        ]

        for fmt in date_formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue

        return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        return None


def format_schedule_response(schedule_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    try:
        if not schedule_data.get('schedule'):
            return "üìÖ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –ø–∞—Ä –Ω–µ—Ç üéâ"

        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {schedule_data['group']}\n"
        response += f"üìÖ {schedule_data['day_of_week']}\n\n"

        for lesson in schedule_data['schedule']:
            response += f"üïí {lesson['time']} - {lesson['subject']}\n"

        return response

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"


def format_moodle_credentials(credentials: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        response = "üéì –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Moodle:\n\n"
        response += f"üë§ –§–ò–û: {credentials['full_name']}\n"
        response += f"üìö –ì—Ä—É–ø–ø–∞: {credentials['group']}\n"
        response += f"üîë –õ–æ–≥–∏–Ω: {credentials['login']}\n"
        response += f"üîí –ü–∞—Ä–æ–ª—å: {credentials['password']}\n"
        response += f"üìß Email: {credentials['email']}\n\n"
        response += "üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!"

        return response

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"


def sanitize_input(text: str) -> str:

    try:

        sanitized = re.sub(r'[<>&"\'\\]', '', text)
        return sanitized.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
        return text


def calculate_ent_chance(score: int, program_min_score: int) -> str:
    try:
        difference = score - program_min_score

        if difference >= 20:
            return "–í—ã—Å–æ–∫–∏–π —à–∞–Ω—Å üéØ"
        elif difference >= 10:
            return "–•–æ—Ä–æ—à–∏–π —à–∞–Ω—Å ‚úÖ"
        elif difference >= 0:
            return "–°—Ä–µ–¥–Ω–∏–π —à–∞–Ω—Å ‚ö†Ô∏è"
        else:
            return "–ù–∏–∑–∫–∏–π —à–∞–Ω—Å ‚ùå"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —à–∞–Ω—Å–æ–≤: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"